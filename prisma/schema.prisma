generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for status & different types of values expected by the database
enum ItemCategory {
  STARTER
  MAIN
  DESSERT
  SIDE
  DRINK
}

enum UserType {
  CLIENT
  RESTAURANT_OWNER
}

enum TimeslotStatus {
  AVAILABLE
  BOOKED
  UNAVAILABLE
}

enum ReservationStatus {
  CONFIRMED
  CANCELED
}

// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model item {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(100)
  description          String?
  category             ItemCategory // Type :  STARTER, MAIN, DESSERT, SIDE, DRINK
  base_price           Decimal                @db.Decimal(10, 2)
  reservation_has_item reservation_has_item[]
  restaurant_has_item  restaurant_has_item[]
  menu_has_item        menu_has_item[]
}

model menu {
  id            Int             @id @default(autoincrement())
  restaurant_id Int
  name          String          @db.VarChar(45)
  description   String?
  is_active     Boolean?        @default(true)
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  restaurant    restaurant      @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  menu_has_item menu_has_item[]
}

// Table de liaison pour lié un/des items à un menu
model menu_has_item {
  menu_id Int
  item_id Int
  menu    menu @relation(fields: [menu_id], references: [id])
  item    item @relation(fields: [item_id], references: [id])

  @@id([menu_id, item_id])
  @@index([item_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model message {
  id             Int          @id @default(autoincrement())
  user_id        Int
  restaurant_id  Int
  reservation_id Int?
  content        String
  status         String?      @default("sent") @db.VarChar(20)
  created_at     DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?    @default(now()) @db.Timestamptz(6)
  reservation    reservation? @relation(fields: [reservation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant     restaurant   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reservation {
  id                   Int                    @id @default(autoincrement())
  user_id              Int
  restaurant_id        Int
  timeslot_id          Int
  status               ReservationStatus      @default(CONFIRMED) // Value: "CONFIRMED" or "CANCELED"
  special_requests     String?
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  message              message[]
  restaurant           restaurant             @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timeslot             timeslot               @relation(fields: [timeslot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                 user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reservation_has_item reservation_has_item[]
}

model reservation_has_item {
  reservation_id Int
  item_id        Int
  quantity       Int         @default(1)
  item_price     Decimal     @db.Decimal(10, 2)
  item           item        @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reservation_item_item_id_fkey")
  reservation    reservation @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reservation_item_reservation_id_fkey")

  @@id([reservation_id, item_id], map: "reservation_item_pkey")
}

model restaurant {
  id            Int       @id @unique @default(autoincrement())
  owner_id      Int
  name          String    @db.VarChar(100)
  address       String?   @db.VarChar(255)
  opening_hours String?
  genre         String?   @db.VarChar(50)
  siret         String    @unique @db.VarChar(14)
  description   String?   @db.VarChar(255)
  image_url     String    @default("https://example.com/placeholder.jpg") @db.VarChar(255)
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)

  // Relations
  menu                menu[]
  message             message[]
  reservation         reservation[]
  restaurant_has_item restaurant_has_item[]
  timeslot            timeslot[]
  owner               user                  @relation("owner_restaurant", fields: [owner_id], references: [id])

  @@index([owner_id], map: "idx_restaurant_owner")
}

model restaurant_has_item {
  restaurant_id Int
  item_id       Int
  current_price Decimal    @db.Decimal(10, 2)
  stock         Int        @default(0)
  is_available  Boolean?   @default(true)
  item          item       @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_item_item_id_fkey")
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "restaurant_item_restaurant_id_fkey")

  @@id([restaurant_id, item_id], map: "restaurant_item_pkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model timeslot {
  id            Int            @id @default(autoincrement())
  restaurant_id Int
  date          DateTime       @db.Date
  start_at      DateTime       @db.Time(6)
  end_at        DateTime       @db.Time(6)
  capacity      Int
  status        TimeslotStatus // (AVAILABLE, BOOKED, UNAVAILABLE)
  created_at    DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?      @default(now()) @db.Timestamptz(6)
  reservation   reservation[]
  restaurant    restaurant     @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user {
  id            Int           @id @default(autoincrement())
  type_user     UserType // Type: CLIENT or RESTAURANT_OWNER
  first_name    String        @db.VarChar(100)
  last_name     String?       @db.VarChar(50)
  email         String        @unique @db.VarChar(255)
  phone_number  String?       @db.VarChar(20)
  password_hash String        @db.VarChar(100)
  resetToken    String?       @unique @db.VarChar(255)
  created_at    DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?     @default(now()) @db.Timestamptz(6)
  message       message[]
  reservation   reservation[]
  restaurants   restaurant[]  @relation("owner_restaurant")
}
